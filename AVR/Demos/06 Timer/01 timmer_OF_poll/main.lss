
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000d4  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000198  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d8  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032e  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000089  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timerDealyMS>:

void timerDealyMS(uint16_t ms)
{
  uint16_t cnt;

  cnt =((F_CPU/1000) * ms>>10);
  6c:	9c 01       	movw	r18, r24
  6e:	a0 e4       	ldi	r26, 0x40	; 64
  70:	bf e1       	ldi	r27, 0x1F	; 31
  72:	0e 94 59 00 	call	0xb2	; 0xb2 <__umulhisi3>
  76:	2a e0       	ldi	r18, 0x0A	; 10
  78:	96 95       	lsr	r25
  7a:	87 95       	ror	r24
  7c:	77 95       	ror	r23
  7e:	67 95       	ror	r22
  80:	2a 95       	dec	r18
  82:	d1 f7       	brne	.-12     	; 0x78 <timerDealyMS+0xc>

  TCNT1 = 65535 - cnt; //we are using  overflow
  84:	60 95       	com	r22
  86:	70 95       	com	r23
  88:	7d bd       	out	0x2d, r23	; 45
  8a:	6c bd       	out	0x2c, r22	; 44

  TCCR1A=0x00;
  8c:	1f bc       	out	0x2f, r1	; 47
  TCCR1B= BV(CS12)|BV(CS10); // set for OF flag
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	8e bd       	out	0x2e, r24	; 46

  while((TIFR & BV (TOV1)) == 0); // wait until ov flag
  92:	08 b6       	in	r0, 0x38	; 56
  94:	02 fe       	sbrs	r0, 2
  96:	fd cf       	rjmp	.-6      	; 0x92 <timerDealyMS+0x26>

  TIFR = BV(TOV1);
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	88 bf       	out	0x38, r24	; 56
}
  9c:	08 95       	ret

0000009e <main>:

int main(void)
{
	uint8_t data = 0xFF;
	// make PORTC as output
	DDRC = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
	uint8_t data = 0xFF;
  a2:	cf ef       	ldi	r28, 0xFF	; 255
	// on-off leds with given time delay.
	while(1)
	{
		PORTC = data;
  a4:	c5 bb       	out	0x15, r28	; 21
		timerDealyMS(300);
  a6:	8c e2       	ldi	r24, 0x2C	; 44
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <timerDealyMS>
		data = ~data;
  ae:	c0 95       	com	r28
  b0:	f9 cf       	rjmp	.-14     	; 0xa4 <main+0x6>

000000b2 <__umulhisi3>:
  b2:	a2 9f       	mul	r26, r18
  b4:	b0 01       	movw	r22, r0
  b6:	b3 9f       	mul	r27, r19
  b8:	c0 01       	movw	r24, r0
  ba:	a3 9f       	mul	r26, r19
  bc:	70 0d       	add	r23, r0
  be:	81 1d       	adc	r24, r1
  c0:	11 24       	eor	r1, r1
  c2:	91 1d       	adc	r25, r1
  c4:	b2 9f       	mul	r27, r18
  c6:	70 0d       	add	r23, r0
  c8:	81 1d       	adc	r24, r1
  ca:	11 24       	eor	r1, r1
  cc:	91 1d       	adc	r25, r1
  ce:	08 95       	ret

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
