   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcd_write_nibble
  12               	lcd_write_nibble:
  13               	.LVL0:
  14               	.LFB6:
  15               		.file 1 "lcd.c"
   1:lcd.c         **** #include <avr/io.h>
   2:lcd.c         **** #include <util/delay.h>
   3:lcd.c         **** #include "lcd.h"
   4:lcd.c         **** 
   5:lcd.c         **** #define BV(bit) (1<<(bit))
   6:lcd.c         **** 
   7:lcd.c         **** #define LCD_DATA_DIR	DDRB
   8:lcd.c         **** #define LCD_DATA_PORT	PORTB
   9:lcd.c         **** #define LCD_DATA_PIN	PINB
  10:lcd.c         **** 
  11:lcd.c         **** #define LCD_CTRL_DIR	DDRD
  12:lcd.c         **** #define LCD_CTRL_PORT	PORTD
  13:lcd.c         **** #define LCD_CTRL_PIN	PIND
  14:lcd.c         **** 
  15:lcd.c         **** #define LCD_D4	4
  16:lcd.c         **** #define LCD_D5	5
  17:lcd.c         **** #define LCD_D6	6
  18:lcd.c         **** #define LCD_D7	7
  19:lcd.c         **** 
  20:lcd.c         **** // #define LCD_BL	0
  21:lcd.c         **** #define LCD_EN	6
  22:lcd.c         **** #define LCD_RW	5
  23:lcd.c         **** #define LCD_RS	4
  24:lcd.c         **** 
  25:lcd.c         **** #define LCD_DATA_MASK (BV(LCD_D4)|BV(LCD_D5)|BV(LCD_D6)|BV(LCD_D7))
  26:lcd.c         **** #define LCD_CTRL_MASK (BV(LCD_EN)|BV(LCD_RW)|BV(LCD_RS))
  27:lcd.c         **** 
  28:lcd.c         **** void lcd_write_nibble(uint8_t rs, uint8_t val)
  29:lcd.c         **** {
  16               		.loc 1 29 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  30:lcd.c         **** 	// rs=0: for cmd	and rs=1: for data
  31:lcd.c         **** 	if(rs==LCD_CMD)
  22               		.loc 1 31 2 view .LVU1
  23               		.loc 1 31 4 is_stmt 0 view .LVU2
  24 0000 8111      		cpse r24,__zero_reg__
  25 0002 00C0      		rjmp .L2
  32:lcd.c         **** 		LCD_CTRL_PORT &= ~BV(LCD_RS);
  26               		.loc 1 32 3 is_stmt 1 view .LVU3
  27               		.loc 1 32 17 is_stmt 0 view .LVU4
  28 0004 9498      		cbi 0x12,4
  29               	.L3:
  33:lcd.c         **** 	else
  34:lcd.c         **** 		LCD_CTRL_PORT |= BV(LCD_RS);
  35:lcd.c         **** 
  36:lcd.c         **** 	asm("nop");
  30               		.loc 1 36 2 is_stmt 1 view .LVU5
  31               	/* #APP */
  32               	 ;  36 "lcd.c" 1
  33 0006 0000      		nop
  34               	 ;  0 "" 2
  37:lcd.c         **** 	_delay_ms(1);
  35               		.loc 1 37 2 view .LVU6
  36               	.LVL1:
  37               	/* #NOAPP */
  38               	.LBB8:
  39               	.LBI8:
  40               		.file 2 "/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h"
   1:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    All rights reserved.
   5:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
   6:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
   9:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  12:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      distribution.
  16:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  17:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  21:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  33:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  35:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  38:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  endif
  42:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  44:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <inttypes.h>
  45:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <math.h>
  47:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  48:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \file */
  49:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \code
  51:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \endcode
  55:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  56:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     used.
  60:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  61:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  70:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     routines linked into the application.
  78:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  79:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  83:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** */
  84:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  85:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
  89:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  90:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef F_CPU
  91:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \def F_CPU
  95:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  97:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 103:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     integer value.
 107:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****  */
 108:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 110:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 111:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 114:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 115:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  include <math.h>
 119:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 120:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 121:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /**
 122:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \ingroup util_delay
 123:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 124:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 126:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 129:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 131:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 137:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 142:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    microseconds of delay.
 146:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 147:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    respectively.
 151:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 152:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \note
 153:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 154:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    not available to the compiler then.
 163:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 164:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****  */
 165:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** void
 166:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** _delay_ms(double __ms)
  41               		.loc 2 166 1 view .LVU7
  42               	.LBB9:
 167:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 168:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	double __tmp ;
  43               		.loc 2 168 2 view .LVU8
 169:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  44               		.loc 2 172 2 view .LVU9
 173:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  45               		.loc 2 173 2 view .LVU10
 174:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  46               		.loc 2 174 2 view .LVU11
 175:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 176:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 179:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 182:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#else
 183:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		//round up by default
 184:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  47               		.loc 2 184 3 view .LVU12
 185:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 186:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 187:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  48               		.loc 2 187 2 view .LVU13
  49 0008 8FEC      		ldi r24,lo8(1999)
  50 000a 97E0      		ldi r25,hi8(1999)
  51 000c 0197      	1:	sbiw r24,1
  52 000e 01F4      		brne 1b
  53               	.LVL2:
  54               		.loc 2 187 2 is_stmt 0 view .LVU14
  55 0010 00C0      		rjmp .
  56 0012 0000      		nop
  57               	.LVL3:
  58               		.loc 2 187 2 view .LVU15
  59               	.LBE9:
  60               	.LBE8:
  38:lcd.c         **** 
  39:lcd.c         **** 	LCD_CTRL_PORT &= ~BV(LCD_RW);	//rw=0:	write operation
  61               		.loc 1 39 2 is_stmt 1 view .LVU16
  62               		.loc 1 39 16 is_stmt 0 view .LVU17
  63 0014 9598      		cbi 0x12,5
  40:lcd.c         **** 
  41:lcd.c         **** 	LCD_DATA_PORT &= ~LCD_DATA_MASK;
  64               		.loc 1 41 2 is_stmt 1 view .LVU18
  65               		.loc 1 41 16 is_stmt 0 view .LVU19
  66 0016 88B3      		in r24,0x18
  67 0018 8F70      		andi r24,lo8(15)
  68 001a 88BB      		out 0x18,r24
  42:lcd.c         **** 	LCD_DATA_PORT |= val & 0xF0;	// write nibble
  69               		.loc 1 42 2 is_stmt 1 view .LVU20
  70               		.loc 1 42 16 is_stmt 0 view .LVU21
  71 001c 88B3      		in r24,0x18
  72               		.loc 1 42 23 view .LVU22
  73 001e 607F      		andi r22,lo8(-16)
  74               	.LVL4:
  75               		.loc 1 42 16 view .LVU23
  76 0020 682B      		or r22,r24
  77 0022 68BB      		out 0x18,r22
  43:lcd.c         **** 
  44:lcd.c         **** 	LCD_CTRL_PORT |= BV(LCD_EN);	//en=1
  78               		.loc 1 44 2 is_stmt 1 view .LVU24
  79               		.loc 1 44 16 is_stmt 0 view .LVU25
  80 0024 969A      		sbi 0x12,6
  45:lcd.c         **** 	asm("nop");
  81               		.loc 1 45 2 is_stmt 1 view .LVU26
  82               	/* #APP */
  83               	 ;  45 "lcd.c" 1
  84 0026 0000      		nop
  85               	 ;  0 "" 2
  46:lcd.c         **** 	// _delay_ms(1);
  47:lcd.c         **** 	LCD_CTRL_PORT &= ~BV(LCD_EN);	//en=0
  86               		.loc 1 47 2 view .LVU27
  87               		.loc 1 47 16 is_stmt 0 view .LVU28
  88               	/* #NOAPP */
  89 0028 9698      		cbi 0x12,6
  90               	/* epilogue start */
  48:lcd.c         **** }
  91               		.loc 1 48 1 view .LVU29
  92 002a 0895      		ret
  93               	.LVL5:
  94               	.L2:
  34:lcd.c         **** 
  95               		.loc 1 34 3 is_stmt 1 view .LVU30
  34:lcd.c         **** 
  96               		.loc 1 34 17 is_stmt 0 view .LVU31
  97 002c 949A      		sbi 0x12,4
  98 002e 00C0      		rjmp .L3
  99               		.cfi_endproc
 100               	.LFE6:
 102               	.global	lcd_write
 104               	lcd_write:
 105               	.LVL6:
 106               	.LFB7:
  49:lcd.c         **** 
  50:lcd.c         **** void lcd_write(uint8_t rs, uint8_t val)
  51:lcd.c         **** {
 107               		.loc 1 51 1 is_stmt 1 view -0
 108               		.cfi_startproc
 109               		.loc 1 51 1 is_stmt 0 view .LVU33
 110 0030 CF93      		push r28
 111               	.LCFI0:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 28, -2
 114 0032 DF93      		push r29
 115               	.LCFI1:
 116               		.cfi_def_cfa_offset 4
 117               		.cfi_offset 29, -3
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 2 */
 121               	.L__stack_usage = 2
 122 0034 D82F      		mov r29,r24
 123 0036 C62F      		mov r28,r22
  52:lcd.c         **** 	uint8_t high = val & 0xF0, low = val << 4;
 124               		.loc 1 52 2 is_stmt 1 view .LVU34
 125               	.LVL7:
  53:lcd.c         **** 	_delay_ms(3);
 126               		.loc 1 53 2 view .LVU35
 127               	.LBB10:
 128               	.LBI10:
 166:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 129               		.loc 2 166 1 view .LVU36
 130               	.LBB11:
 168:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 131               		.loc 2 168 2 view .LVU37
 172:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 132               		.loc 2 172 2 view .LVU38
 173:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 133               		.loc 2 173 2 view .LVU39
 174:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 134               		.loc 2 174 2 view .LVU40
 184:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 135               		.loc 2 184 3 view .LVU41
 136               		.loc 2 187 2 view .LVU42
 137 0038 8FE6      		ldi r24,lo8(5999)
 138 003a 97E1      		ldi r25,hi8(5999)
 139 003c 0197      	1:	sbiw r24,1
 140 003e 01F4      		brne 1b
 141               	.LVL8:
 142               		.loc 2 187 2 is_stmt 0 view .LVU43
 143 0040 00C0      		rjmp .
 144 0042 0000      		nop
 145               	.LVL9:
 146               		.loc 2 187 2 view .LVU44
 147               	.LBE11:
 148               	.LBE10:
  54:lcd.c         **** 	lcd_write_nibble(rs, high);
 149               		.loc 1 54 2 is_stmt 1 view .LVU45
  52:lcd.c         **** 	_delay_ms(3);
 150               		.loc 1 52 10 is_stmt 0 view .LVU46
 151 0044 607F      		andi r22,lo8(-16)
 152               	.LVL10:
 153               		.loc 1 54 2 view .LVU47
 154 0046 8D2F      		mov r24,r29
 155 0048 0E94 0000 		call lcd_write_nibble
 156               	.LVL11:
  55:lcd.c         **** 	lcd_write_nibble(rs, low);
 157               		.loc 1 55 2 is_stmt 1 view .LVU48
  52:lcd.c         **** 	_delay_ms(3);
 158               		.loc 1 52 29 is_stmt 0 view .LVU49
 159 004c 6C2F      		mov r22,r28
 160 004e 6295      		swap r22
 161 0050 607F      		andi r22,lo8(-16)
 162               		.loc 1 55 2 view .LVU50
 163 0052 8D2F      		mov r24,r29
 164 0054 0E94 0000 		call lcd_write_nibble
 165               	.LVL12:
 166               	/* epilogue start */
  56:lcd.c         **** 	// busy flag
  57:lcd.c         **** }
 167               		.loc 1 57 1 view .LVU51
 168 0058 DF91      		pop r29
 169               	.LVL13:
 170               		.loc 1 57 1 view .LVU52
 171 005a CF91      		pop r28
 172               	.LVL14:
 173               		.loc 1 57 1 view .LVU53
 174 005c 0895      		ret
 175               		.cfi_endproc
 176               	.LFE7:
 178               	.global	lcd_init
 180               	lcd_init:
 181               	.LFB8:
  58:lcd.c         **** 
  59:lcd.c         **** void lcd_init()
  60:lcd.c         **** {
 182               		.loc 1 60 1 is_stmt 1 view -0
 183               		.cfi_startproc
 184               	/* prologue: function */
 185               	/* frame size = 0 */
 186               	/* stack size = 0 */
 187               	.L__stack_usage = 0
  61:lcd.c         **** 	// set data and ctrl port as output
  62:lcd.c         **** 	LCD_DATA_DIR |= LCD_DATA_MASK;
 188               		.loc 1 62 2 view .LVU55
 189               		.loc 1 62 15 is_stmt 0 view .LVU56
 190 005e 87B3      		in r24,0x17
 191 0060 806F      		ori r24,lo8(-16)
 192 0062 87BB      		out 0x17,r24
  63:lcd.c         **** 	LCD_DATA_PORT &= ~LCD_DATA_MASK;
 193               		.loc 1 63 2 is_stmt 1 view .LVU57
 194               		.loc 1 63 16 is_stmt 0 view .LVU58
 195 0064 88B3      		in r24,0x18
 196 0066 8F70      		andi r24,lo8(15)
 197 0068 88BB      		out 0x18,r24
  64:lcd.c         **** 	LCD_CTRL_DIR |= LCD_CTRL_MASK;
 198               		.loc 1 64 2 is_stmt 1 view .LVU59
 199               		.loc 1 64 15 is_stmt 0 view .LVU60
 200 006a 81B3      		in r24,0x11
 201 006c 8067      		ori r24,lo8(112)
 202 006e 81BB      		out 0x11,r24
  65:lcd.c         **** 	LCD_CTRL_PORT &= ~LCD_CTRL_MASK;
 203               		.loc 1 65 2 is_stmt 1 view .LVU61
 204               		.loc 1 65 16 is_stmt 0 view .LVU62
 205 0070 82B3      		in r24,0x12
 206 0072 8F78      		andi r24,lo8(-113)
 207 0074 82BB      		out 0x12,r24
  66:lcd.c         **** 	// settling time 100ms
  67:lcd.c         **** 	_delay_ms(100);
 208               		.loc 1 67 2 is_stmt 1 view .LVU63
 209               	.LVL15:
 210               	.LBB12:
 211               	.LBI12:
 166:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 212               		.loc 2 166 1 view .LVU64
 213               	.LBB13:
 168:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 214               		.loc 2 168 2 view .LVU65
 172:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 215               		.loc 2 172 2 view .LVU66
 173:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 216               		.loc 2 173 2 view .LVU67
 174:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 217               		.loc 2 174 2 view .LVU68
 184:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 218               		.loc 2 184 3 view .LVU69
 219               		.loc 2 187 2 view .LVU70
 220 0076 2FEF      		ldi r18,lo8(159999)
 221 0078 80E7      		ldi r24,hi8(159999)
 222 007a 92E0      		ldi r25,hlo8(159999)
 223 007c 2150      	1:	subi r18,1
 224 007e 8040      		sbci r24,0
 225 0080 9040      		sbci r25,0
 226 0082 01F4      		brne 1b
 227 0084 00C0      		rjmp .
 228 0086 0000      		nop
 229               	.LVL16:
 230               		.loc 2 187 2 is_stmt 0 view .LVU71
 231               	.LBE13:
 232               	.LBE12:
  68:lcd.c         **** 
  69:lcd.c         **** 	// send commands to lcd
  70:lcd.c         **** 
  71:lcd.c         **** 	// DL(0)=>4bit	N(1)=>2 lcd lines	F(0)=>font 5x8
  72:lcd.c         **** 	lcd_write(LCD_CMD, 0x28);
 233               		.loc 1 72 2 is_stmt 1 view .LVU72
 234 0088 68E2      		ldi r22,lo8(40)
 235 008a 80E0      		ldi r24,0
 236 008c 0E94 0000 		call lcd_write
 237               	.LVL17:
  73:lcd.c         **** 
  74:lcd.c         **** 	// D(1)=>display on	C(0)=>no cursor	B(0)=>no blink
  75:lcd.c         **** 	lcd_write(LCD_CMD, 0x0C);
 238               		.loc 1 75 2 view .LVU73
 239 0090 6CE0      		ldi r22,lo8(12)
 240 0092 80E0      		ldi r24,0
 241 0094 0E94 0000 		call lcd_write
 242               	.LVL18:
  76:lcd.c         **** 
  77:lcd.c         **** 	// lcd clear
  78:lcd.c         **** 	lcd_write(LCD_CMD, 0x01);
 243               		.loc 1 78 2 view .LVU74
 244 0098 61E0      		ldi r22,lo8(1)
 245 009a 80E0      		ldi r24,0
 246 009c 0E94 0000 		call lcd_write
 247               	.LVL19:
 248               	/* epilogue start */
  79:lcd.c         **** 
  80:lcd.c         **** 	// I/D(1)=>increment cursor	S(0)=>no shift
  81:lcd.c         **** 	//lcd_write(LCD_CMD, 0x06);
  82:lcd.c         **** }
 249               		.loc 1 82 1 is_stmt 0 view .LVU75
 250 00a0 0895      		ret
 251               		.cfi_endproc
 252               	.LFE8:
 254               	.global	lcd_gotoxy
 256               	lcd_gotoxy:
 257               	.LVL20:
 258               	.LFB9:
  83:lcd.c         **** 
  84:lcd.c         **** int lcd_gotoxy(uint8_t row, uint8_t col)
  85:lcd.c         **** {
 259               		.loc 1 85 1 is_stmt 1 view -0
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
  86:lcd.c         **** 	if(row>1 || col>15)
 265               		.loc 1 86 2 view .LVU77
 266               		.loc 1 86 4 is_stmt 0 view .LVU78
 267 00a2 8230      		cpi r24,lo8(2)
 268 00a4 00F4      		brsh .L10
 269               		.loc 1 86 11 discriminator 1 view .LVU79
 270 00a6 6031      		cpi r22,lo8(16)
 271 00a8 00F4      		brsh .L10
  87:lcd.c         **** 		return 0; // false => failed
  88:lcd.c         **** 	if(row==0)	//row 0: ADDR = 0x00
 272               		.loc 1 88 2 is_stmt 1 view .LVU80
 273               		.loc 1 88 4 is_stmt 0 view .LVU81
 274 00aa 8111      		cpse r24,__zero_reg__
 275 00ac 00C0      		rjmp .L8
 276               	.LVL21:
 277               	.LBB16:
 278               	.LBB17:
  89:lcd.c         **** 		lcd_write(LCD_CMD, 0x80+col);
 279               		.loc 1 89 3 is_stmt 1 view .LVU82
 280 00ae 6058      		subi r22,lo8(-(-128))
 281               	.LVL22:
 282               	.L11:
 283               		.loc 1 89 3 is_stmt 0 view .LVU83
 284               	.LBE17:
 285               	.LBE16:
  90:lcd.c         **** 	else		//row 1: ADDR = 0x40
  91:lcd.c         **** 		lcd_write(LCD_CMD, 0xC0+col);
 286               		.loc 1 91 3 view .LVU84
 287 00b0 0E94 0000 		call lcd_write
 288               	.LVL23:
  92:lcd.c         **** 	return 1; // true => success
 289               		.loc 1 92 9 view .LVU85
 290 00b4 81E0      		ldi r24,lo8(1)
 291 00b6 90E0      		ldi r25,0
 292 00b8 0895      		ret
 293               	.LVL24:
 294               	.L8:
  91:lcd.c         **** 	return 1; // true => success
 295               		.loc 1 91 3 is_stmt 1 view .LVU86
 296 00ba 6054      		subi r22,lo8(-(-64))
 297               	.LVL25:
  91:lcd.c         **** 	return 1; // true => success
 298               		.loc 1 91 3 is_stmt 0 view .LVU87
 299 00bc 80E0      		ldi r24,0
 300               	.LVL26:
  91:lcd.c         **** 	return 1; // true => success
 301               		.loc 1 91 3 view .LVU88
 302 00be 00C0      		rjmp .L11
 303               	.LVL27:
 304               	.L10:
  87:lcd.c         **** 	if(row==0)	//row 0: ADDR = 0x00
 305               		.loc 1 87 10 view .LVU89
 306 00c0 90E0      		ldi r25,0
 307 00c2 80E0      		ldi r24,0
 308               	.LVL28:
 309               	/* epilogue start */
  93:lcd.c         **** }
 310               		.loc 1 93 1 view .LVU90
 311 00c4 0895      		ret
 312               		.cfi_endproc
 313               	.LFE9:
 315               	.global	lcd_putchar
 317               	lcd_putchar:
 318               	.LVL29:
 319               	.LFB10:
  94:lcd.c         **** 
  95:lcd.c         **** void lcd_putchar(char ch)
  96:lcd.c         **** {
 320               		.loc 1 96 1 is_stmt 1 view -0
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
  97:lcd.c         **** 	lcd_write(LCD_DATA, ch);
 326               		.loc 1 97 2 view .LVU92
 327 00c6 682F      		mov r22,r24
 328 00c8 81E0      		ldi r24,lo8(1)
 329               	.LVL30:
 330               		.loc 1 97 2 is_stmt 0 view .LVU93
 331 00ca 0E94 0000 		call lcd_write
 332               	.LVL31:
 333               	/* epilogue start */
  98:lcd.c         **** }
 334               		.loc 1 98 1 view .LVU94
 335 00ce 0895      		ret
 336               		.cfi_endproc
 337               	.LFE10:
 339               	.global	lcd_putstring
 341               	lcd_putstring:
 342               	.LVL32:
 343               	.LFB11:
  99:lcd.c         **** 
 100:lcd.c         **** void lcd_putstring(uint8_t row, const char *str)
 101:lcd.c         **** {
 344               		.loc 1 101 1 is_stmt 1 view -0
 345               		.cfi_startproc
 346               		.loc 1 101 1 is_stmt 0 view .LVU96
 347 00d0 0F93      		push r16
 348               	.LCFI2:
 349               		.cfi_def_cfa_offset 3
 350               		.cfi_offset 16, -2
 351 00d2 1F93      		push r17
 352               	.LCFI3:
 353               		.cfi_def_cfa_offset 4
 354               		.cfi_offset 17, -3
 355 00d4 CF93      		push r28
 356               	.LCFI4:
 357               		.cfi_def_cfa_offset 5
 358               		.cfi_offset 28, -4
 359 00d6 DF93      		push r29
 360               	.LCFI5:
 361               		.cfi_def_cfa_offset 6
 362               		.cfi_offset 29, -5
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 4 */
 366               	.L__stack_usage = 4
 367 00d8 8B01      		movw r16,r22
 102:lcd.c         **** 	int cnt;
 368               		.loc 1 102 2 is_stmt 1 view .LVU97
 103:lcd.c         **** 	lcd_gotoxy(row, 0);
 369               		.loc 1 103 2 view .LVU98
 370 00da 60E0      		ldi r22,0
 371               	.LVL33:
 372               		.loc 1 103 2 is_stmt 0 view .LVU99
 373 00dc 0E94 0000 		call lcd_gotoxy
 374               	.LVL34:
 104:lcd.c         **** 	for(cnt=0; *str!='\0' && cnt<16; ++cnt)
 375               		.loc 1 104 2 is_stmt 1 view .LVU100
 376               		.loc 1 104 2 is_stmt 0 view .LVU101
 377 00e0 E801      		movw r28,r16
 378 00e2 0F5E      		subi r16,-17
 379 00e4 1F4F      		sbci r17,-1
 380               	.LVL35:
 381               	.L14:
 382               		.loc 1 104 13 discriminator 1 view .LVU102
 383 00e6 8991      		ld r24,Y+
 384               	.LVL36:
 385               		.loc 1 104 2 discriminator 1 view .LVU103
 386 00e8 8823      		tst r24
 387 00ea 01F0      		breq .L13
 388               		.loc 1 104 24 discriminator 3 view .LVU104
 389 00ec C017      		cp r28,r16
 390 00ee D107      		cpc r29,r17
 391 00f0 01F4      		brne .L16
 392               	.L13:
 393               	/* epilogue start */
 105:lcd.c         **** 		lcd_putchar(*str++);
 106:lcd.c         **** }
 394               		.loc 1 106 1 view .LVU105
 395 00f2 DF91      		pop r29
 396 00f4 CF91      		pop r28
 397               	.LVL37:
 398               		.loc 1 106 1 view .LVU106
 399 00f6 1F91      		pop r17
 400 00f8 0F91      		pop r16
 401 00fa 0895      		ret
 402               	.LVL38:
 403               	.L16:
 105:lcd.c         **** 		lcd_putchar(*str++);
 404               		.loc 1 105 3 is_stmt 1 discriminator 4 view .LVU107
 105:lcd.c         **** 		lcd_putchar(*str++);
 405               		.loc 1 105 3 is_stmt 0 discriminator 4 view .LVU108
 406 00fc 0E94 0000 		call lcd_putchar
 407               	.LVL39:
 105:lcd.c         **** 		lcd_putchar(*str++);
 408               		.loc 1 105 3 discriminator 4 view .LVU109
 409 0100 00C0      		rjmp .L14
 410               		.cfi_endproc
 411               	.LFE11:
 413               	.Letext0:
 414               		.file 3 "/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccwlwiqn.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwlwiqn.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwlwiqn.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwlwiqn.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwlwiqn.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwlwiqn.s:12     .text:0000000000000000 lcd_write_nibble
     /tmp/ccwlwiqn.s:104    .text:0000000000000030 lcd_write
     /tmp/ccwlwiqn.s:180    .text:000000000000005e lcd_init
     /tmp/ccwlwiqn.s:256    .text:00000000000000a2 lcd_gotoxy
     /tmp/ccwlwiqn.s:317    .text:00000000000000c6 lcd_putchar
     /tmp/ccwlwiqn.s:341    .text:00000000000000d0 lcd_putstring

NO UNDEFINED SYMBOLS
