   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	init
  12               	init:
  13               	.LFB8:
  14               		.file 1 "main.c"
   1:main.c        **** /* ExINT with buzzer
   2:main.c        ****       Buzz PD3
   3:main.c        ****       INT  PD2
   4:main.c        **** */
   5:main.c        **** 
   6:main.c        **** #include <avr/io.h>
   7:main.c        **** #include <avr/interrupt.h>
   8:main.c        **** #include <util/delay.h>
   9:main.c        **** #include <stdio.h>
  10:main.c        **** 
  11:main.c        **** #define BV(bit)	(1<<(bit))
  12:main.c        **** 
  13:main.c        **** #define BUZZER_PORT		PORTD
  14:main.c        **** #define BUZZER_DDR		DDRD
  15:main.c        **** #define BUZZER_PIN		PIND
  16:main.c        **** 
  17:main.c        **** #define INTR0_PORT		PORTD
  18:main.c        **** #define INTR0_DDR			DDRD
  19:main.c        **** 
  20:main.c        **** #define INTR2_PORT		PORTD
  21:main.c        **** #define INTR2_DDR		DDRB
  22:main.c        **** 
  23:main.c        **** #define BUZZER			3
  24:main.c        **** #define EINT0			2
  25:main.c        **** #define EINT2			2
  26:main.c        **** 
  27:main.c        **** volatile uint8_t intr0_flag=0, intr2_flag=0;
  28:main.c        **** 
  29:main.c        **** void init(void);
  30:main.c        **** void beep(uint8_t s);
  31:main.c        **** void delay_s(uint8_t s);
  32:main.c        **** 
  33:main.c        **** int main(void)
  34:main.c        **** {
  35:main.c        **** 	init();
  36:main.c        **** 	while(1)
  37:main.c        **** 	{
  38:main.c        **** 		if(intr0_flag)
  39:main.c        **** 		{
  40:main.c        **** 			beep(1);
  41:main.c        **** 			intr0_flag = 0;
  42:main.c        **** 		}
  43:main.c        **** 		if(intr2_flag)
  44:main.c        **** 		{
  45:main.c        **** 			beep(1);
  46:main.c        **** 			intr2_flag = 0;
  47:main.c        **** 		}
  48:main.c        **** 		_delay_ms(200);
  49:main.c        **** 	}
  50:main.c        **** 	return 0;
  51:main.c        **** }
  52:main.c        **** 
  53:main.c        **** void init(void)
  54:main.c        **** {
  15               		.loc 1 54 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  55:main.c        **** 	// set buzzer pin as output
  56:main.c        **** 	BUZZER_DDR |= BV(BUZZER);
  21               		.loc 1 56 2 view .LVU1
  22               		.loc 1 56 13 is_stmt 0 view .LVU2
  23 0000 8B9A      		sbi 0x11,3
  57:main.c        **** 	// turn off the buzzer
  58:main.c        **** 	BUZZER_PORT &= ~BV(BUZZER);
  24               		.loc 1 58 2 is_stmt 1 view .LVU3
  25               		.loc 1 58 14 is_stmt 0 view .LVU4
  26 0002 9398      		cbi 0x12,3
  59:main.c        **** 
  60:main.c        **** 	// set int0 pin as input
  61:main.c        **** 	INTR0_DDR &= ~BV(EINT0);
  27               		.loc 1 61 2 is_stmt 1 view .LVU5
  28               		.loc 1 61 12 is_stmt 0 view .LVU6
  29 0004 8A98      		cbi 0x11,2
  62:main.c        **** 	// write 1 on intr pin - activate pull up
  63:main.c        **** 	INTR0_PORT |= BV(EINT0);
  30               		.loc 1 63 2 is_stmt 1 view .LVU7
  31               		.loc 1 63 13 is_stmt 0 view .LVU8
  32 0006 929A      		sbi 0x12,2
  64:main.c        **** 	// configure int0 for falling edge
  65:main.c        **** 	MCUCR |=  BV(ISC01);
  33               		.loc 1 65 2 is_stmt 1 view .LVU9
  34               		.loc 1 65 8 is_stmt 0 view .LVU10
  35 0008 85B7      		in r24,0x35
  36 000a 8260      		ori r24,lo8(2)
  37 000c 85BF      		out 0x35,r24
  66:main.c        **** 	// enable int0 intrrupt
  67:main.c        **** 	GICR |= BV(INT0);
  38               		.loc 1 67 2 is_stmt 1 view .LVU11
  39               		.loc 1 67 7 is_stmt 0 view .LVU12
  40 000e 8BB7      		in r24,0x3b
  41 0010 8064      		ori r24,lo8(64)
  42 0012 8BBF      		out 0x3b,r24
  68:main.c        **** 
  69:main.c        **** 	// set int2 pin as input
  70:main.c        **** 	INTR2_DDR &= ~BV(EINT2);
  43               		.loc 1 70 2 is_stmt 1 view .LVU13
  44               		.loc 1 70 12 is_stmt 0 view .LVU14
  45 0014 BA98      		cbi 0x17,2
  71:main.c        **** 	// write 1 on intr pin - activate pull up
  72:main.c        **** 	INTR2_PORT |= BV(EINT2);
  46               		.loc 1 72 2 is_stmt 1 view .LVU15
  47               		.loc 1 72 13 is_stmt 0 view .LVU16
  48 0016 929A      		sbi 0x12,2
  73:main.c        **** 	// configure int2 for rising edge
  74:main.c        **** 	MCUCSR |=  BV(ISC2);
  49               		.loc 1 74 2 is_stmt 1 view .LVU17
  50               		.loc 1 74 9 is_stmt 0 view .LVU18
  51 0018 84B7      		in r24,0x34
  52 001a 8064      		ori r24,lo8(64)
  53 001c 84BF      		out 0x34,r24
  75:main.c        **** 	// enable int2 intrrupt
  76:main.c        **** 	GICR |= BV(INT2);
  54               		.loc 1 76 2 is_stmt 1 view .LVU19
  55               		.loc 1 76 7 is_stmt 0 view .LVU20
  56 001e 8BB7      		in r24,0x3b
  57 0020 8062      		ori r24,lo8(32)
  58 0022 8BBF      		out 0x3b,r24
  77:main.c        **** 
  78:main.c        **** 	// enable global intrrupt
  79:main.c        **** 	sei();
  59               		.loc 1 79 2 is_stmt 1 view .LVU21
  60               	/* #APP */
  61               	 ;  79 "main.c" 1
  62 0024 7894      		sei
  63               	 ;  0 "" 2
  64               	/* #NOAPP */
  65               	/* epilogue start */
  80:main.c        **** }
  66               		.loc 1 80 1 is_stmt 0 view .LVU22
  67 0026 0895      		ret
  68               		.cfi_endproc
  69               	.LFE8:
  71               	.global	delay_s
  73               	delay_s:
  74               	.LVL0:
  75               	.LFB10:
  81:main.c        **** 
  82:main.c        **** void beep(uint8_t s)
  83:main.c        **** {
  84:main.c        **** 	// turn on the buzzer
  85:main.c        **** 	BUZZER_PORT |= BV(BUZZER);
  86:main.c        **** 
  87:main.c        **** 	// delay of given sec
  88:main.c        **** 	delay_s(s);
  89:main.c        **** 
  90:main.c        **** 	// turn off the buzzer
  91:main.c        **** 	BUZZER_PORT &= ~BV(BUZZER);
  92:main.c        **** }
  93:main.c        **** 
  94:main.c        **** void delay_s(uint8_t s)
  95:main.c        **** {
  76               		.loc 1 95 1 is_stmt 1 view -0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  96:main.c        **** 	while(s--)
  82               		.loc 1 96 2 view .LVU24
  83               	.L3:
  84               		.loc 1 96 9 is_stmt 0 view .LVU25
  85               	.LVL1:
  86 0028 8150      		subi r24,1
  87 002a 00F4      		brcc .L4
  88               	/* epilogue start */
  97:main.c        **** 		_delay_ms(1000);
  98:main.c        **** }
  89               		.loc 1 98 1 view .LVU26
  90 002c 0895      		ret
  91               	.L4:
  97:main.c        **** 		_delay_ms(1000);
  92               		.loc 1 97 3 is_stmt 1 view .LVU27
  93               	.LVL2:
  94               	.LBB6:
  95               	.LBI6:
  96               		.file 2 "/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h"
   1:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    All rights reserved.
   5:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
   6:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
   9:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  12:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      distribution.
  16:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  17:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  21:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  33:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  35:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  38:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  endif
  42:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  44:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <inttypes.h>
  45:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <math.h>
  47:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  48:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \file */
  49:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \code
  51:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \endcode
  55:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  56:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     used.
  60:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  61:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  70:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     routines linked into the application.
  78:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  79:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  83:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** */
  84:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  85:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
  89:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  90:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef F_CPU
  91:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \def F_CPU
  95:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  97:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 103:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     integer value.
 107:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****  */
 108:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 110:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 111:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 114:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 115:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  include <math.h>
 119:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 120:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 121:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /**
 122:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \ingroup util_delay
 123:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 124:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 126:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 129:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 131:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 137:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 142:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    microseconds of delay.
 146:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 147:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    respectively.
 151:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 152:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \note
 153:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 154:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    not available to the compiler then.
 163:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 164:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****  */
 165:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** void
 166:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** _delay_ms(double __ms)
  97               		.loc 2 166 1 view .LVU28
  98               	.LBB7:
 167:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 168:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	double __tmp ;
  99               		.loc 2 168 2 view .LVU29
 169:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 100               		.loc 2 172 2 view .LVU30
 173:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 101               		.loc 2 173 2 view .LVU31
 174:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 102               		.loc 2 174 2 view .LVU32
 175:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 176:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 179:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 182:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#else
 183:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		//round up by default
 184:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 103               		.loc 2 184 3 view .LVU33
 185:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 186:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 187:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 104               		.loc 2 187 2 view .LVU34
 105 002e 2FEF      		ldi r18,lo8(1599999)
 106 0030 39E6      		ldi r19,hi8(1599999)
 107 0032 98E1      		ldi r25,hlo8(1599999)
 108 0034 2150      	1:	subi r18,1
 109 0036 3040      		sbci r19,0
 110 0038 9040      		sbci r25,0
 111 003a 01F4      		brne 1b
 112 003c 00C0      		rjmp .
 113 003e 0000      		nop
 114 0040 00C0      		rjmp .L3
 115               	.LBE7:
 116               	.LBE6:
 117               		.cfi_endproc
 118               	.LFE10:
 120               	.global	beep
 122               	beep:
 123               	.LVL3:
 124               	.LFB9:
  83:main.c        **** 	// turn on the buzzer
 125               		.loc 1 83 1 view -0
 126               		.cfi_startproc
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
  85:main.c        **** 
 131               		.loc 1 85 2 view .LVU36
  85:main.c        **** 
 132               		.loc 1 85 14 is_stmt 0 view .LVU37
 133 0042 939A      		sbi 0x12,3
  88:main.c        **** 
 134               		.loc 1 88 2 is_stmt 1 view .LVU38
 135 0044 0E94 0000 		call delay_s
 136               	.LVL4:
  91:main.c        **** }
 137               		.loc 1 91 2 view .LVU39
  91:main.c        **** }
 138               		.loc 1 91 14 is_stmt 0 view .LVU40
 139 0048 9398      		cbi 0x12,3
 140               	/* epilogue start */
  92:main.c        **** 
 141               		.loc 1 92 1 view .LVU41
 142 004a 0895      		ret
 143               		.cfi_endproc
 144               	.LFE9:
 146               		.section	.text.startup,"ax",@progbits
 147               	.global	main
 149               	main:
 150               	.LFB7:
  34:main.c        **** 	init();
 151               		.loc 1 34 1 is_stmt 1 view -0
 152               		.cfi_startproc
 153               	/* prologue: function */
 154               	/* frame size = 0 */
 155               	/* stack size = 0 */
 156               	.L__stack_usage = 0
  35:main.c        **** 	while(1)
 157               		.loc 1 35 2 view .LVU43
 158 0000 0E94 0000 		call init
 159               	.LVL5:
 160               	.L9:
  36:main.c        **** 	{
 161               		.loc 1 36 2 view .LVU44
  38:main.c        **** 		{
 162               		.loc 1 38 3 view .LVU45
  38:main.c        **** 		{
 163               		.loc 1 38 6 is_stmt 0 view .LVU46
 164 0004 8091 0000 		lds r24,intr0_flag
  38:main.c        **** 		{
 165               		.loc 1 38 5 view .LVU47
 166 0008 8823      		tst r24
 167 000a 01F0      		breq .L7
  40:main.c        **** 			intr0_flag = 0;
 168               		.loc 1 40 4 is_stmt 1 view .LVU48
 169 000c 81E0      		ldi r24,lo8(1)
 170 000e 0E94 0000 		call beep
 171               	.LVL6:
  41:main.c        **** 		}
 172               		.loc 1 41 4 view .LVU49
  41:main.c        **** 		}
 173               		.loc 1 41 15 is_stmt 0 view .LVU50
 174 0012 1092 0000 		sts intr0_flag,__zero_reg__
 175               	.L7:
  43:main.c        **** 		{
 176               		.loc 1 43 3 is_stmt 1 view .LVU51
  43:main.c        **** 		{
 177               		.loc 1 43 6 is_stmt 0 view .LVU52
 178 0016 8091 0000 		lds r24,intr2_flag
  43:main.c        **** 		{
 179               		.loc 1 43 5 view .LVU53
 180 001a 8823      		tst r24
 181 001c 01F0      		breq .L8
  45:main.c        **** 			intr2_flag = 0;
 182               		.loc 1 45 4 is_stmt 1 view .LVU54
 183 001e 81E0      		ldi r24,lo8(1)
 184 0020 0E94 0000 		call beep
 185               	.LVL7:
  46:main.c        **** 		}
 186               		.loc 1 46 4 view .LVU55
  46:main.c        **** 		}
 187               		.loc 1 46 15 is_stmt 0 view .LVU56
 188 0024 1092 0000 		sts intr2_flag,__zero_reg__
 189               	.L8:
  48:main.c        **** 	}
 190               		.loc 1 48 3 is_stmt 1 view .LVU57
 191               	.LVL8:
 192               	.LBB8:
 193               	.LBI8:
 166:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 194               		.loc 2 166 1 view .LVU58
 195               	.LBB9:
 168:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 196               		.loc 2 168 2 view .LVU59
 172:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 197               		.loc 2 172 2 view .LVU60
 173:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 198               		.loc 2 173 2 view .LVU61
 174:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 199               		.loc 2 174 2 view .LVU62
 184:/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 200               		.loc 2 184 3 view .LVU63
 201               		.loc 2 187 2 view .LVU64
 202 0028 2FEF      		ldi r18,lo8(319999)
 203 002a 81EE      		ldi r24,hi8(319999)
 204 002c 94E0      		ldi r25,hlo8(319999)
 205 002e 2150      	1:	subi r18,1
 206 0030 8040      		sbci r24,0
 207 0032 9040      		sbci r25,0
 208 0034 01F4      		brne 1b
 209 0036 00C0      		rjmp .
 210 0038 0000      		nop
 211 003a 00C0      		rjmp .L9
 212               	.LBE9:
 213               	.LBE8:
 214               		.cfi_endproc
 215               	.LFE7:
 217               		.text
 218               	.global	__vector_1
 220               	__vector_1:
 221               	.LFB11:
  99:main.c        **** 
 100:main.c        **** ISR(INT0_vect)
 101:main.c        **** {
 222               		.loc 1 101 1 view -0
 223               		.cfi_startproc
 224 004c 8F93      		__gcc_isr 1
 225               	/* prologue: Signal */
 226               	/* frame size = 0 */
 227               	/* stack size = 0...4 */
 228               	.L__stack_usage = 0 + __gcc_isr.n_pushed
 102:main.c        **** 	intr0_flag = 1;
 229               		.loc 1 102 2 view .LVU66
 230               		.loc 1 102 13 is_stmt 0 view .LVU67
 231 004e 81E0      		ldi r24,lo8(1)
 232 0050 8093 0000 		sts intr0_flag,r24
 233               	/* epilogue start */
 103:main.c        **** }
 234               		.loc 1 103 1 view .LVU68
 235 0054 8F91      		__gcc_isr 2
 236 0056 1895      		reti
 237               		__gcc_isr 0,r24
 238               		.cfi_endproc
 239               	.LFE11:
 241               	.global	__vector_3
 243               	__vector_3:
 244               	.LFB12:
 104:main.c        **** 
 105:main.c        **** ISR(INT2_vect)
 106:main.c        **** {
 245               		.loc 1 106 1 is_stmt 1 view -0
 246               		.cfi_startproc
 247 0058 8F93      		__gcc_isr 1
 248               	/* prologue: Signal */
 249               	/* frame size = 0 */
 250               	/* stack size = 0...4 */
 251               	.L__stack_usage = 0 + __gcc_isr.n_pushed
 107:main.c        **** 	intr2_flag = 1;
 252               		.loc 1 107 2 view .LVU70
 253               		.loc 1 107 13 is_stmt 0 view .LVU71
 254 005a 81E0      		ldi r24,lo8(1)
 255 005c 8093 0000 		sts intr2_flag,r24
 256               	/* epilogue start */
 108:main.c        **** }
 257               		.loc 1 108 1 view .LVU72
 258 0060 8F91      		__gcc_isr 2
 259 0062 1895      		reti
 260               		__gcc_isr 0,r24
 261               		.cfi_endproc
 262               	.LFE12:
 264               	.global	intr2_flag
 265               		.section .bss
 268               	intr2_flag:
 269 0000 00        		.zero	1
 270               	.global	intr0_flag
 273               	intr0_flag:
 274 0001 00        		.zero	1
 275               		.text
 276               	.Letext0:
 277               		.file 3 "/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/stdint.h"
 278               		.file 4 "/home/sunbeam/D_day/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccPQxy9H.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccPQxy9H.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccPQxy9H.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccPQxy9H.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccPQxy9H.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccPQxy9H.s:12     .text:0000000000000000 init
     /tmp/ccPQxy9H.s:73     .text:0000000000000028 delay_s
     /tmp/ccPQxy9H.s:122    .text:0000000000000042 beep
     /tmp/ccPQxy9H.s:149    .text.startup:0000000000000000 main
     /tmp/ccPQxy9H.s:273    .bss:0000000000000001 intr0_flag
     /tmp/ccPQxy9H.s:268    .bss:0000000000000000 intr2_flag
     /tmp/ccPQxy9H.s:220    .text:000000000000004c __vector_1
                            *ABS*:0000000000000001 __gcc_isr.n_pushed.001
     /tmp/ccPQxy9H.s:243    .text:0000000000000058 __vector_3
                            *ABS*:0000000000000001 __gcc_isr.n_pushed.002

UNDEFINED SYMBOLS
__do_clear_bss
