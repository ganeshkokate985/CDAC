
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000138  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001cc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000220  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ab  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071c  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051b  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dc  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  74:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init>:
}

void init(void)
{
	// set buzzer pin as output
	BUZZER_DDR |= BV(BUZZER);
  7c:	8b 9a       	sbi	0x11, 3	; 17
	// turn off the buzzer
	BUZZER_PORT &= ~BV(BUZZER);
  7e:	93 98       	cbi	0x12, 3	; 18

	// set int0 pin as input
	INTR0_DDR &= ~BV(EINT0);
  80:	8a 98       	cbi	0x11, 2	; 17
	// write 1 on intr pin - activate pull up
	INTR0_PORT |= BV(EINT0);
  82:	92 9a       	sbi	0x12, 2	; 18
	// configure int0 for falling edge
	MCUCR |=  BV(ISC01);
  84:	85 b7       	in	r24, 0x35	; 53
  86:	82 60       	ori	r24, 0x02	; 2
  88:	85 bf       	out	0x35, r24	; 53
	// enable int0 intrrupt
	GICR |= BV(INT0);
  8a:	8b b7       	in	r24, 0x3b	; 59
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	8b bf       	out	0x3b, r24	; 59

	// set int2 pin as input
	INTR2_DDR &= ~BV(EINT2);
  90:	ba 98       	cbi	0x17, 2	; 23
	// write 1 on intr pin - activate pull up
	INTR2_PORT |= BV(EINT2);
  92:	92 9a       	sbi	0x12, 2	; 18
	// configure int2 for rising edge
	MCUCSR |=  BV(ISC2);
  94:	84 b7       	in	r24, 0x34	; 52
  96:	80 64       	ori	r24, 0x40	; 64
  98:	84 bf       	out	0x34, r24	; 52
	// enable int2 intrrupt
	GICR |= BV(INT2);
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	8b bf       	out	0x3b, r24	; 59

	// enable global intrrupt
	sei();
  a0:	78 94       	sei
}
  a2:	08 95       	ret

000000a4 <delay_s>:

}

void delay_s(uint8_t s)
{
	while(s--)
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	08 f4       	brcc	.+2      	; 0xaa <delay_s+0x6>
		_delay_ms(50);
}
  a8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f e7       	ldi	r18, 0x7F	; 127
  ac:	38 e3       	ldi	r19, 0x38	; 56
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <delay_s+0xc>
  b8:	00 c0       	rjmp	.+0      	; 0xba <delay_s+0x16>
  ba:	00 00       	nop
  bc:	f3 cf       	rjmp	.-26     	; 0xa4 <delay_s>

000000be <beep>:
{
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	18 2f       	mov	r17, r24
  c6:	c2 e3       	ldi	r28, 0x32	; 50
  c8:	d0 e0       	ldi	r29, 0x00	; 0
		BUZZER_PORT |= BV(BUZZER);
  ca:	93 9a       	sbi	0x12, 3	; 18
		delay_s(s);
  cc:	81 2f       	mov	r24, r17
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <delay_s>
		BUZZER_PORT &= ~BV(BUZZER);
  d2:	93 98       	cbi	0x12, 3	; 18
  d4:	21 97       	sbiw	r28, 0x01	; 1
	for (size_t i = 0; i < 50; i++) {
  d6:	c9 f7       	brne	.-14     	; 0xca <beep+0xc>
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	08 95       	ret

000000e0 <__vector_1>:

ISR(INT0_vect)
{
  e0:	8f 93       	push	r24
	intr0_flag = 1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <intr0_flag>
}
  e8:	8f 91       	pop	r24
  ea:	18 95       	reti

000000ec <__vector_3>:

ISR(INT2_vect)
{
  ec:	8f 93       	push	r24
	intr2_flag = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  f4:	8f 91       	pop	r24
  f6:	18 95       	reti

000000f8 <main>:
	init();
  f8:	0e 94 3e 00 	call	0x7c	; 0x7c <init>
		if(intr0_flag)
  fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <intr0_flag>
 100:	88 23       	and	r24, r24
 102:	29 f0       	breq	.+10     	; 0x10e <main+0x16>
			beep(10);
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <beep>
			intr0_flag = 0;
 10a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <intr0_flag>
		if(intr2_flag)
 10e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 112:	88 23       	and	r24, r24
 114:	29 f0       	breq	.+10     	; 0x120 <main+0x28>
			beep(10);
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	0e 94 5f 00 	call	0xbe	; 0xbe <beep>
			intr2_flag = 0;
 11c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	81 ee       	ldi	r24, 0xE1	; 225
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x2e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x38>
 130:	00 00       	nop
 132:	e4 cf       	rjmp	.-56     	; 0xfc <main+0x4>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
